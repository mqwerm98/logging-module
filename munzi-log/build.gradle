plugins {
    id 'org.springframework.boot' version '2.7.3'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java-library'
    id 'maven-publish'
    id 'signing'
}

bootJar.enabled = false
jar.enabled = true

ext {
    version_project = project.properties["app.version"]

    version_slf4j = '1.7.30'
    version_logback = '1.2.3'
    version_log4jdbc = '1.16'

    version_lombok = '1.18.16'

    version_commons_lang = '3.9'
    version_commons_codec = '1.14'

    version_jackson = '2.11.0'

    version_modelmapper = '2.3.0'
    version_validation = '2.3.7.RELEASE'
    version_junit = '5.2.0'

    version_log4j = '2.17.0'
    version_disruptor = '3.4.4'

    version_log4j2 = '2.6.1'


    version_java = '11'
    project_build_sourceEncoding = 'UTF-8'

}

group = project.properties["app.group"]
version = project.properties["app.version"]
sourceCompatibility = '11'

compileJava.options.encoding = ext.project_build_sourceEncoding

springBoot {
    buildInfo {
        properties {
            additional = [
                    'fullVersion' : project.properties["app.version"]
            ]
        }
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}

jar {
    enabled = true

    from(sourceSets.main.output) {
        exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
    }
    archiveClassifier.set('')
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = project.property("app.group")
            artifactId = project.property("app.name")
            version = project.property("app.version")

            from components.java

            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }

            pom {
                name = 'Munzi Log'
                packaging = 'jar'
                // optionally artifactId can be defined here
                description = 'api server request, response log managing'
                url = 'https://github.com/mqwerm98/logging-module'

                scm {
                    connection = 'scm:git:git://github.com/mqwerm98/logging-module.git'
                    developerConnection = 'scm:git:git://github.com/mqwerm98/logging-module.git'
                    url = 'scm:git:git://github.com/mqwerm98/logging-module.git'
                }

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id = 'mqwerm98'
                        name = 'munzi'
                        email = 'mqwerm98@naver.com'
                    }
                }
            }
        }
    }
    repositories {
        maven {
//            def releasesRepoUrl = project.property("nexus.url.release")
//            def snapshotsRepoUrl = project.property("nexus.url.snapshot")
//            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
//
//            credentials {
//                username = project.property("nexus.username")
//                password = project.property("nexus.password")
//            }

            credentials {
                username = project.property("ossrh.username")
                password = project.property("ossrh.password")
            }

            def releasesRepoUrl = project.property("ossrh.url.release")
            def snapshotsRepoUrl = project.property("ossrh.url.snapshot")
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

        }
    }
}

signing {
    sign publishing.publications.mavenJava
}

javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

configurations {
    all {
        // log4j2를 사용하기 위해, spring의 default인 logback을 제외
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
        exclude group: 'org.apache.logging.log4j'
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'


    // log4j2
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-log4j2'

    testImplementation 'org.springframework.boot:spring-boot-starter-log4j2'
    implementation group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: "${version_jackson}"
    implementation group: 'com.lmax', name: 'disruptor', version: "${version_disruptor}"

    // log4jdbc-log4j2
    implementation group: 'org.bgee.log4jdbc-log4j2', name: 'log4jdbc-log4j2-jdbc4.1', version: '1.16'

    // json
    implementation group: 'org.json', name: 'json', version: '20230618'

    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.0'

}

test {
    useJUnitPlatform()
}
