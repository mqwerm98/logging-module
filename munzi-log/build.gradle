import java.time.LocalDateTime
import java.time.ZoneOffset
import java.time.format.DateTimeFormatter

plugins {
    id 'org.springframework.boot' version '2.4.2'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'maven'
    id 'maven-publish'
    id 'signing'
}

bootJar.enabled = false
jar.enabled = true


//plugins {
//    id 'java'
//    id 'maven'
//    id 'signing'
//}



group = project.properties["app.group"]
version = ext.version_project
sourceCompatibility = '1.8'

compileJava.options.encoding = ext.project_build_sourceEncoding

springBoot {
    buildInfo {
        properties {
            additional = [
                    'fullVersion' : project.properties["app.version"] + '.' + LocalDateTime.ofInstant(properties["time"], ZoneOffset.systemDefault()).format(DateTimeFormatter.ofPattern("yyyyMMddHHmmss"))
            ]
        }
    }
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

signing {
    sign configurations.archives
}

apply plugin: 'maven'
uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: project.properties["nexus.dkargo.url.release"]) {
                authentication(userName: project.properties["nexus.dkargo.username"], password: project.properties["nexus.dkargo.password"])
            }
            snapshotRepository(url: project.properties["nexus.dkargo.url.snapshot"]) {
                authentication(userName: project.properties["nexus.dkargo.username"], password: project.properties["nexus.dkargo.password"])
            }

            pom.project {
                name 'Plankton library'
                packaging 'jar'
                // optionally artifactId can be defined here
//                description 'A application used as an example on how to set up pushing  its components to the Central Repository.'
                url 'https://github.com/mqwerm98/logging-module'

                scm {
                    connection 'scm:git:git://github.com/mqwerm98/logging-module.git'
                    developerConnection 'scm:git:git://github.com/mqwerm98/logging-module.git'
                    url 'scm:git:git://github.com/mqwerm98/logging-module.git'
                }

                licenses {
                    license {
                        name 'The Apache License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id 'munzi'
                        name 'munzi'
                        email 'mqwerm98@naver.com'
                    }
                }
            }
        }
    }
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
    compileOnly {
        extendsFrom annotationProcessor
    }

    all {
        // log4j2를 사용하기 위해, spring의 default인 logback을 제외
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'


    // log4j2
    compile 'org.springframework.boot:spring-boot-starter-log4j2'
    testImplementation 'org.springframework.boot:spring-boot-starter-log4j2'
    compile group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: "${version_jackson}"
    implementation group: 'org.apache.logging.log4j', name: 'log4j-web', version: "${version_log4jweb}"
    implementation group: 'com.lmax', name: 'disruptor', version: "${version_disruptor}"

    // log4jdbc-log4j2
    compile group: 'org.bgee.log4jdbc-log4j2', name: 'log4jdbc-log4j2-jdbc4.1', version: "${version_log4jdbc}"

}

test {
    useJUnitPlatform()
}
